{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier-Oblique;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red81\green136\blue67;\red32\green32\blue32;\red191\green100\blue38;
\red153\green168\blue186;\red109\green109\blue109;\red254\green187\blue91;\red86\green132\blue173;\red133\green96\blue154;
\red88\green118\blue71;}
{\*\expandedcolortbl;;\csgenericrgb\c31765\c53333\c26275;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c52157\c37647\c60392;
\csgenericrgb\c34510\c46275\c27843;}
\margl1440\margr1440\vieww21520\viewh12460\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\i\fs26 \cf2 \cb3 /*****************************************************************************\
 * Revising previous code to store the pairs of states and capitals in a Map *\
 * using the HashMap function. Display the content of the Map, then use the  *\
 * TreeMap class to sort the map while using a binary search tree for        *\
 * storage. The program then prompts the user to enter a state and it then   *\
 * displays the capital for the state. --By Dallas Jamm\'e9                     *\
 *****************************************************************************/\

\f1\i0 \cf4 import \cf5 java.util.HashMap\cf4 ;\
import \cf5 java.util.Iterator\cf4 ;\
import \cf5 java.util.Scanner\cf4 ;\
import \cf5 java.util.TreeMap\cf4 ;\
\
public class \cf5 SateCapitals2 \{\
\
    \cf6 // Main method //\
    \cf4 public static void \cf7 main\cf5 (String[] args) \{\
        \cf6 // Create an array from getData and use array to populate a HashMap of states and capitals\
        \cf5 String[][] stateCapitals = 
\f0\i makeArray
\f1\i0 ()\cf4 ;\
        \cf5 HashMap<String\cf4 , \cf5 String> capitalCities = \cf4 new \cf5 HashMap<>()\cf4 ;\
        for \cf5 (String[] strings : stateCapitals) \{\
            capitalCities.put(strings[\cf8 0\cf5 ]\cf4 , \cf5 strings[\cf8 1\cf5 ])\cf4 ;\
        \cf5 \}\
\
        \cf6 //print Hashmap using iterator method\
        \cf5 Iterator<String> keys = capitalCities.keySet().iterator()\cf4 ;\
        \cf5 Iterator<String> values = capitalCities.values().iterator()\cf4 ;\
        while \cf5 (keys.hasNext()) \{\
            System.
\f0\i \cf9 out
\f1\i0 \cf5 .print(values.next() + \cf10 ", "\cf5 )\cf4 ;\
            \cf5 System.
\f0\i \cf9 out
\f1\i0 \cf5 .println(keys.next())\cf4 ;\
        \cf5 \}\
\
        \cf6 //Create a TreeMap from HashMap to sort data\
        \cf5 TreeMap<String\cf4 , \cf5 String> treeMapOfStateCapitals = \cf4 new \cf5 TreeMap<>(capitalCities)\cf4 ;\
\
        \cf6 //Print TreeMap data\
        \cf5 Iterator<String> treeKeys = treeMapOfStateCapitals.keySet().iterator()\cf4 ;\
        \cf5 Iterator<String> treeValues = treeMapOfStateCapitals.values().iterator()\cf4 ;\
        while \cf5 (treeKeys.hasNext()) \{\
            System.
\f0\i \cf9 out
\f1\i0 \cf5 .print(treeValues.next() + \cf10 ", "\cf5 )\cf4 ;\
            \cf5 System.
\f0\i \cf9 out
\f1\i0 \cf5 .println(treeKeys.next())\cf4 ;\
        \cf5 \}\
\
        \cf6 // Use Scanner to get user data\
        \cf5 Scanner input = \cf4 new \cf5 Scanner(System.
\f0\i \cf9 in
\f1\i0 \cf5 )\cf4 ;\
\
        \cf6 // Prompt user to enter a state and program returns the capital\
        \cf5 System.
\f0\i \cf9 out
\f1\i0 \cf5 .print(\cf10 "Enter a state to see the capital: "\cf5 )\cf4 ;\
            \cf5 String state = input.nextLine()\cf4 ;\
        \cf5 System.
\f0\i \cf9 out
\f1\i0 \cf5 .println(treeMapOfStateCapitals.get(state))\cf4 ;\
\
    \cf5 \}\
\
    \cf6 // getData helps to create an array of states and capitals\
    \cf4 public static \cf5 String[][] \cf7 makeArray\cf5 () \{\
        \cf4 return new \cf5 String[][]\{\
                \{\cf10 "Alabama"\cf4 , \cf10 "Montgomery"\cf5 \}\cf4 , \cf5 \{\cf10 "Alaska"\cf4 , \cf10 "Juneau"\cf5 \}\cf4 , \cf5 \{\cf10 "Arizona"\cf4 , \cf10 "Phoenix"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Arkansas"\cf4 , \cf10 "Little Rock"\cf5 \}\cf4 , \cf5 \{\cf10 "California"\cf4 , \cf10 "Sacramento"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Colorado"\cf4 , \cf10 "Denver"\cf5 \}\cf4 , \cf5 \{\cf10 "Connecticut"\cf4 , \cf10 "Hartford"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Delaware"\cf4 , \cf10 "Dover"\cf5 \}\cf4 , \cf5 \{\cf10 "Florida"\cf4 , \cf10 "Tallahassee"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Georgia"\cf4 , \cf10 "Atlanta"\cf5 \}\cf4 ,\cf5 \{\cf10 "Hawaii"\cf4 , \cf10 "Honolulu"\cf5 \}\cf4 , \cf5 \{\cf10 "Idaho"\cf4 , \cf10 "Boise"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Illinois"\cf4 , \cf10 "Springfield"\cf5 \}\cf4 , \cf5 \{\cf10 "Indiana"\cf4 , \cf10 "Indianapolis"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Iowa Des"\cf4 , \cf10 "Moines"\cf5 \}\cf4 , \cf5 \{\cf10 "Kansas"\cf4 , \cf10 "Topeka"\cf5 \}\cf4 , \cf5 \{\cf10 "Kentucky"\cf4 ,\cf10 "Frankfort"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Louisiana"\cf4 , \cf10 "Baton Rouge"\cf5 \}\cf4 , \cf5 \{\cf10 "Maine"\cf4 , \cf10 "Augusta"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Maryland"\cf4 , \cf10 "Annapolis"\cf5 \}\cf4 , \cf5 \{\cf10 "Massachusetts"\cf4 , \cf10 "Boston"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Michigan"\cf4 , \cf10 "Lansing"\cf5 \}\cf4 , \cf5 \{\cf10 "Minnesota"\cf4 , \cf10 "Saint Paul"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Mississippi"\cf4 , \cf10 "Jackson"\cf5 \}\cf4 , \cf5 \{\cf10 "Missouri"\cf4 , \cf10 "Jefferson City"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Montana"\cf4 , \cf10 "Helena"\cf5 \}\cf4 , \cf5 \{\cf10 "Nebraska"\cf4 , \cf10 "Lincoln"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Nevada	"\cf4 , \cf10 "Carson City"\cf5 \}\cf4 , \cf5 \{\cf10 "New Hampshire"\cf4 , \cf10 "Concord"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "New Jersey"\cf4 , \cf10 "Trenton"\cf5 \}\cf4 , \cf5 \{\cf10 "New Mexico"\cf4 , \cf10 "Santa Fe"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "New York"\cf4 , \cf10 "Albany"\cf5 \}\cf4 , \cf5 \{\cf10 "North Carolina"\cf4 , \cf10 "Raleigh"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "North Dakota"\cf4 , \cf10 "Bismarck"\cf5 \}\cf4 ,\cf5 \{\cf10 "Ohio"\cf4 , \cf10 "Columbus"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Oklahoma"\cf4 , \cf10 "Oklahoma City"\cf5 \}\cf4 , \cf5 \{\cf10 "Oregon"\cf4 , \cf10 "Salem"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Pennsylvania"\cf4 , \cf10 "Harrisburg"\cf5 \}\cf4 , \cf5 \{\cf10 "Rhode Island"\cf4 , \cf10 "Providence"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "South Carolina"\cf4 , \cf10 "Columbia"\cf5 \}\cf4 , \cf5 \{\cf10 "South Dakota"\cf4 , \cf10 "Pierre"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Tennessee"\cf4 , \cf10 "Nashville"\cf5 \}\cf4 , \cf5 \{\cf10 "Texas"\cf4 , \cf10 "Austin"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Utah"\cf4 , \cf10 "Salt Lake City"\cf5 \}\cf4 , \cf5 \{\cf10 "Vermont"\cf4 , \cf10 "Montpelier"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Virginia"\cf4 , \cf10 "Richmond"\cf5 \}\cf4 , \cf5 \{\cf10 "Washington"\cf4 , \cf10 "Olympia"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "West Virginia"\cf4 , \cf10 "Charleston"\cf5 \}\cf4 , \cf5 \{\cf10 "Wisconsin"\cf4 , \cf10 "Madison"\cf5 \}\cf4 ,\
                \cf5 \{\cf10 "Wyoming"\cf4 , \cf10 "Cheyenne"\cf5 \}\}\cf4 ;\
    \cf5 \}\
\}\
\
}