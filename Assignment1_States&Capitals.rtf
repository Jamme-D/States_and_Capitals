{\rtf1\ansi\ansicpg1252\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier-Oblique;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red81\green136\blue67;\red32\green32\blue32;\red191\green100\blue38;
\red153\green168\blue186;\red109\green109\blue109;\red254\green187\blue91;\red133\green96\blue154;\red88\green118\blue71;
\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c31765\c53333\c26275;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c34510\c46275\c27843;
\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww21080\viewh11760\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\i\fs26 \cf2 \cb3 /*****************************************************************************\
 * Develop a program that asks the user to enter a capital for a U.S. state. *\
 * Upon receiving the user input, the program reports whether the user input *\
 * is correct. For this application, the 50 states and their capitals are    *\
 * stored in a two-dimensional array in order by state name. Display the     *\
 * current contents of the array then use a bubble sort to sort the content  *\
 * by capital. Next, prompt the user to enter answers for all the state      *\
 * capitals and then display the total correct count. The user's answer is   *\
 * not case-sensitive. -By Dallas Jamm\'e9                                      *\
 *****************************************************************************/\
\

\f1\i0 \cf4 import \cf5 java.util.Scanner\cf4 ;\
\
public class \cf5 StateCapitals \{\
    \cf6 // Main method //\
    \cf4 public static void \cf7 main\cf5 (String[] args) \{\
\
        \cf6 // Use getData to create an array from the states and capitals information\
        \cf5 String[][] stateCapitals = 
\f0\i makeArray
\f1\i0 ()\cf4 ;\
\
        \cf6 //print original array\
        \cf5 System.
\f0\i \cf8 out
\f1\i0 \cf5 .println(\cf9 "Current Array: "\cf5 )\cf4 ;\
        for \cf5 (String[] states : stateCapitals) \{\
            System.
\f0\i \cf8 out
\f1\i0 \cf5 .print(states[\cf10 1\cf5 ] + \cf9 ", "\cf5 )\cf4 ;\
            \cf5 System.
\f0\i \cf8 out
\f1\i0 \cf5 .println(states[\cf10 0\cf5 ] + \cf9 " "\cf5 )\cf4 ;\
        \cf5 \}\
\
        \cf6 // Use getData to create a new array\
        \cf5 String[][] sortedByCapitals = 
\f0\i makeArray
\f1\i0 ()\cf4 ;\
\
        \cf6 //Print bubble sorted array by capital\
        \cf5 System.
\f0\i \cf8 out
\f1\i0 \cf5 .println(\cf9 "Sorted Array: "\cf5 )\cf4 ;\
        
\f0\i \cf5 bubbleSort
\f1\i0 (sortedByCapitals)\cf4 ;\
        for \cf5 (String[] states : sortedByCapitals) \{\
            System.
\f0\i \cf8 out
\f1\i0 \cf5 .print(states[\cf10 1\cf5 ] + \cf9 ", "\cf5 )\cf4 ;\
            \cf5 System.
\f0\i \cf8 out
\f1\i0 \cf5 .println(states[\cf10 0\cf5 ] + \cf9 " "\cf5 )\cf4 ;\
        \cf5 \}\
\
        \cf6 // Use Scanner to get user data\
        \cf5 Scanner input = \cf4 new \cf5 Scanner(System.
\f0\i \cf8 in
\f1\i0 \cf5 )\cf4 ;\
\
        \cf6 // Prompt user to enter each state capital\
        \cf4 int \cf5 counter = \cf10 0\cf4 ;	\cf6 // Correct answer\
        \cf4 for \cf5 (String[] stateCapital : stateCapitals) \{\
            System.
\f0\i \cf8 out
\f1\i0 \cf5 .print(\cf9 "What is the capital of "\
                    \cf5 + stateCapital[\cf10 0\cf5 ] + \cf9 "? "\cf5 )\cf4 ;\
            \cf5 String capital = input.nextLine()\cf4 ;\
\
            if\cf5 (capital.equals(\cf9 "end"\cf5 )) \{\
                \cf4 break;\
            \cf5 \}\
\
            \cf4 if \cf5 (
\f0\i isEqual
\f1\i0 (stateCapital[\cf10 1\cf5 ]\cf4 , \cf5 capital)) \{\
                System.
\f0\i \cf8 out
\f1\i0 \cf5 .println(\cf9 "You are correct!"\cf5 )\cf4 ;\
                \cf5 counter++\cf4 ;\
            \cf5 \} \cf4 else \cf5 \{\
                System.
\f0\i \cf8 out
\f1\i0 \cf5 .println(\cf9 "The correct answer is " \cf5 +\
                        stateCapital[\cf10 1\cf5 ])\cf4 ;\
            \cf5 \}\
        \}\
\
        \cf6 // Display the number of correct answers\
        \cf5 System.
\f0\i \cf8 out
\f1\i0 \cf5 .println(\cf9 "\cf4 \\n\cf9 The correct count is " \cf5 + counter)\cf4 ;\
        \cf5 \}\
\
    \cf6 // Bubble sort for 2D string array\
    \cf4 public static void \cf7 bubbleSort\cf5 (String[][] str) \{\
        String state\cf4 ;\
        \cf5 String capital\cf4 ;\
\
        for \cf5 (\cf4 int \cf5 j = \cf10 0\cf4 ; \cf5 j < str.\cf8 length\cf4 ; \cf5 j++) \{\
            \cf4 for \cf5 (\cf4 int \cf5 k = j + \cf10 1\cf4 ; \cf5 k < str.\cf8 length\cf4 ; \cf5 k++) \{\
\
                \cf6 // comparing and swapping adjacent strings\
                \cf4 if \cf5 (str[k][\cf10 1\cf5 ].compareTo(str[j][\cf10 1\cf5 ]) < \cf10 0\cf5 ) \{\
                    state = str[j][\cf10 0\cf5 ]\cf4 ;\
                    \cf5 capital = str[j][\cf10 1\cf5 ]\cf4 ;\
                    \cf5 str[j][\cf10 0\cf5 ] = str[k][\cf10 0\cf5 ]\cf4 ;\
                    \cf5 str[j][\cf10 1\cf5 ] = str[k][\cf10 1\cf5 ]\cf4 ;\
                    \cf5 str[k][\cf10 0\cf5 ] = state\cf4 ;\
                    \cf5 str[k][\cf10 1\cf5 ] = capital\cf4 ;\
                \cf5 \}\
            \}\
        \}\
    \}\
\
    \cf6 //isEqual will help compare strings to see if entered data is correct\
    \cf4 public static boolean \cf7 isEqual\cf5 (String c\cf4 , \cf5 String a) \{\
        String inputCapital = a.toLowerCase()\cf4 ;\
        \cf5 String actualCapital = c.toLowerCase()\cf4 ;\
        if \cf5 (actualCapital.length() != inputCapital.length())\
            \cf4 return false;\
\
        for \cf5 (\cf4 int \cf5 i = \cf10 0\cf4 ; \cf5 i < c.length()\cf4 ; \cf5 i++) \{\
            \cf4 if \cf5 (actualCapital.charAt(i) != inputCapital.charAt(i))\
                \cf4 return false;\
        \cf5 \}\
\
        \cf4 return true;\
    \cf5 \}\
\
    \cf6 // getData helps to create arrays of states and capitals\
    \cf4 public static \cf5 String[][] \cf7 makeArray\cf5 () \{\
        \cf4 return new \cf5 String[][]\{\
                \{\cf9 "Alabama"\cf4 , \cf9 "Montgomery"\cf5 \}\cf4 , \cf5 \{\cf9 "Alaska"\cf4 , \cf9 "Juneau"\cf5 \}\cf4 , \cf5 \{\cf9 "Arizona"\cf4 , \cf9 "Phoenix"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Arkansas"\cf4 , \cf9 "Little Rock"\cf5 \}\cf4 , \cf5 \{\cf9 "California"\cf4 , \cf9 "Sacramento"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Colorado"\cf4 , \cf9 "Denver"\cf5 \}\cf4 , \cf5 \{\cf9 "Connecticut"\cf4 , \cf9 "Hartford"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Delaware"\cf4 , \cf9 "Dover"\cf5 \}\cf4 , \cf5 \{\cf9 "Florida"\cf4 , \cf9 "Tallahassee"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Georgia"\cf4 , \cf9 "Atlanta"\cf5 \}\cf4 ,\cf5 \{\cf9 "Hawaii"\cf4 , \cf9 "Honolulu"\cf5 \}\cf4 , \cf5 \{\cf9 "Idaho"\cf4 , \cf9 "Boise"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Illinois"\cf4 , \cf9 "Springfield"\cf5 \}\cf4 , \cf5 \{\cf9 "Indiana"\cf4 , \cf9 "Indianapolis"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Iowa Des"\cf4 , \cf9 "Moines"\cf5 \}\cf4 , \cf5 \{\cf9 "Kansas"\cf4 , \cf9 "Topeka"\cf5 \}\cf4 , \cf5 \{\cf9 "Kentucky"\cf4 ,\cf9 "Frankfort"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Louisiana"\cf4 , \cf9 "Baton Rouge"\cf5 \}\cf4 , \cf5 \{\cf9 "Maine"\cf4 , \cf9 "Augusta"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Maryland"\cf4 , \cf9 "Annapolis"\cf5 \}\cf4 , \cf5 \{\cf9 "Massachusetts"\cf4 , \cf9 "Boston"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Michigan"\cf4 , \cf9 "Lansing"\cf5 \}\cf4 , \cf5 \{\cf9 "Minnesota"\cf4 , \cf9 "Saint Paul"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Mississippi"\cf4 , \cf9 "Jackson"\cf5 \}\cf4 , \cf5 \{\cf9 "Missouri"\cf4 , \cf9 "Jefferson City"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Montana"\cf4 , \cf9 "Helena"\cf5 \}\cf4 , \cf5 \{\cf9 "Nebraska"\cf4 , \cf9 "Lincoln"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Nevada	"\cf4 , \cf9 "Carson City"\cf5 \}\cf4 , \cf5 \{\cf9 "New Hampshire"\cf4 , \cf9 "Concord"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "New Jersey"\cf4 , \cf9 "Trenton"\cf5 \}\cf4 , \cf5 \{\cf9 "New Mexico"\cf4 , \cf9 "Santa Fe"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "New York"\cf4 , \cf9 "Albany"\cf5 \}\cf4 , \cf5 \{\cf9 "North Carolina"\cf4 , \cf9 "Raleigh"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "North Dakota"\cf4 , \cf9 "Bismarck"\cf5 \}\cf4 ,\cf5 \{\cf9 "Ohio"\cf4 , \cf9 "Columbus"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Oklahoma"\cf4 , \cf9 "Oklahoma City"\cf5 \}\cf4 , \cf5 \{\cf9 "Oregon"\cf4 , \cf9 "Salem"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Pennsylvania"\cf4 , \cf9 "Harrisburg"\cf5 \}\cf4 , \cf5 \{\cf9 "Rhode Island"\cf4 , \cf9 "Providence"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "South Carolina"\cf4 , \cf9 "Columbia"\cf5 \}\cf4 , \cf5 \{\cf9 "South Dakota"\cf4 , \cf9 "Pierre"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Tennessee"\cf4 , \cf9 "Nashville"\cf5 \}\cf4 , \cf5 \{\cf9 "Texas"\cf4 , \cf9 "Austin"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Utah"\cf4 , \cf9 "Salt Lake City"\cf5 \}\cf4 , \cf5 \{\cf9 "Vermont"\cf4 , \cf9 "Montpelier"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Virginia"\cf4 , \cf9 "Richmond"\cf5 \}\cf4 , \cf5 \{\cf9 "Washington"\cf4 , \cf9 "Olympia"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "West Virginia"\cf4 , \cf9 "Charleston"\cf5 \}\cf4 , \cf5 \{\cf9 "Wisconsin"\cf4 , \cf9 "Madison"\cf5 \}\cf4 ,\
                \cf5 \{\cf9 "Wyoming"\cf4 , \cf9 "Cheyenne"\cf5 \}\}\cf4 ;\
    \cf5 \}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 \
}